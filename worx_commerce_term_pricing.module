<?php

/**
 * Implements hook_menu().
 */
function worx_commerce_term_pricing_menu() {
  $items = array();

  $items['node/%node/term_pricing'] = array(
    'title' => 'Term Pricing Settings',
    'description' => 'Review and add new term pricing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('worx_commerce_term_pricing_settings_form', 1),
    'access callback' => 'worx_commerce_term_pricing_access',
    'access arguments' => array(1),
    'file' => 'worx_commerce_term_pricing.admin.inc',
    'file path' => drupal_get_path('module', 'worx_commerce_term_pricing'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/term_pricing/rule'] = array(
    'title' => 'Term Pricing',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/commerce/term_pricing/options'] = array(
    'title' => 'Display Option Sets',
    'description' => 'Review and add Bulk Flavor Display Options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('worx_commerce_term_pricing_options_form'),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'file' => 'worx_commerce_term_pricing.admin.inc',
    'file path' => drupal_get_path('module', 'worx_commerce_term_pricing'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/term_pricing/options'] = array(
    'title' => 'Create/edit Option Sets',
    'description' => 'Edit or add Bulk Flavor Display Option for Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('worx_commerce_term_pricing_node_option_form', 1),
    'access callback' => 'worx_commerce_term_pricing_access',
    'access arguments' => array(1),
    'file' => 'worx_commerce_term_pricing.admin.inc',
    'file path' => drupal_get_path('module', 'worx_commerce_term_pricing'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/commerce/term_pricing/rule/%/delete'] = array(
    'title' => 'Delete Term Pricing Rule',
    'description' => 'Callback to delete a term pricing rule',
    'page callback' => 'worx_commerce_term_pricing_delete_rule',
    'page arguments' => array(4),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/term_pricing/options/%/delete'] = array(
    'title' => 'Delete Display Option Set',
    'description' => 'Callback to delete a Product Display option set',
    'page callback' => 'worx_commerce_term_pricing_delete_option',
    'page arguments' => array(4),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function worx_commerce_term_pricing_permission() {
  $return = array();

  $return['worx_commerce_term_pricing_admin'] = array(
    'title' => t('Administer Term Pricing'),
    'description' => t('Allows the user to apply price changing term rules'),
  );

  return $return;
}

function worx_commerce_term_pricing_access ($node) {
  $is_display = in_array($node->type, array_keys(commerce_product_reference_node_types()));
  return $is_display && user_access('worx_commerce_term_pricing_admin');
}

/**
 * Implements hook_action_info().
 */
function worx_commerce_term_pricing_rules_action_info() {
  $rules = array();

  $rules['worx_commerce_term_pricing_calculate_price'] = array(
    'label' => t('Calculate A Term Price Product\'s Price'),
    'group' => t('Worx Commerce Term Pricing'),
    'parameter' => array(
      'product' => array(
        'label' => t('Commerce Line Item'),
        'type' => 'commerce_line_item',
        'description' => t('The Commerce Line Item used to calculate price.')
      ),
    ),
    'provides' => array(
      'calculated_price' => array(
        'label' => t('Calculated Price'),
        'type' => 'decimal',
      ),
    ),
  );

  return $rules;
}

/**
 * @param $line_item
 *  Commerce Line Item Object
 * @return array
 */
function worx_commerce_term_pricing_calculate_price($line_item) {
  $product = commerce_product_load_by_sku($line_item->line_item_label);
  $base_price = $product->commerce_price[LANGUAGE_NONE][0]['amount'];
  if (!empty($product->commerce_price['und'][0]['data']['components'])) {
    //dsm($product);
  }
  $calculated_price = $base_price;
  // If the product in question has not been added to a cart, bail out.
  /**
  if (!isset($line_item->line_item_id) || !isset($line_item->field_bulk_flavor[LANGUAGE_NONE][0]['tid'])) {
    return array(
      'calculated_price' => $base_price,
    );
  }
  // @TODO: Need to make this dynamic. along with the rest.
  $flavor = $line_item->field_bulk_flavor[LANGUAGE_NONE][0]['tid'];
   */

  // First we see if a rule matches both the flavor & SKU
  $query = db_select('commerce_term_pricing_rules', 'ctpr')
    ->fields('ctpr')
    ->condition('product_sku', $line_item->line_item_label)
    ->execute();

  while ($result = $query->fetchAssoc()) {

    // Check one to see if we got a rule, if not just return the product's base
    // price.
    if (!is_array($result)) {
      return array(
        'calculated_price' => $base_price,
      );
    }
    $settings = unserialize($result['attributes']);
    foreach ($settings as $property => $value) {
      if (isset($line_item->{$property}[LANGUAGE_NONE])) {
        $keys = array_keys($line_item->{$property}[LANGUAGE_NONE][0]);
        if ($line_item->{$property}[LANGUAGE_NONE][0][$keys[0]] == $value) {
          // Assuming we found a rule which applies to this product, calculate the new
          // price and return it.
          $change = $result['price_change'];
          $type = $result['change_type'];

          // If the change is a flat change, simple add the two values together
          // after converting the change to minor units. Otherwise determine % value
          // and multiply by the change value, rounding to account for decimal %s.
          if ($type == 'flat') {
            $change = (int) ($change * 100); // convert to minor units, discard any extra decimal places;
            $calculated_price = $calculated_price + $change;
          }
          else {
            $calculated_price = round($calculated_price + (($base_price / 100) * $change));
          }
        }
      }
    }
  }

  return array(
    'calculated_price' => $calculated_price,
  );
}

function worx_commerce_term_pricing_delete_rule($rule_id) {
  // @TODO: Setup a "nothing to delete" return for if we get here and don't find
  // a valid record.
  $deleted = db_delete('commerce_term_pricing_rules')
    ->condition('tprid', $rule_id)
    ->execute();

  drupal_set_message('Pricing Rule Deleted');

  drupal_goto(drupal_get_destination());
}

function worx_commerce_term_pricing_delete_option($nid) {
  // @TODO: Setup a "nothing to delete" return for if we get here and don't find
  // a valid record.
  $deleted = db_delete('commerce_term_pricing_node_options')
    ->condition('nid', $nid)
    ->execute();

  drupal_set_message('Option Set Deleted');

  drupal_goto(drupal_get_destination());
}

function worx_commerce_term_pricing_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_cart_add_to_cart_form') !== FALSE) {
    $node = menu_get_object();
    // Don't like this but its because of the ajax call return
    if (is_object($node)) {
        $form_state['worx_commerce_term_pricing_nid'] = $node->nid;
      }
      else {
        $node = node_load($form_state['worx_commerce_term_pricing_nid']);
      }
    if ($node->type == 'product_display') {
      $nid = $node->nid;

      $exists = db_select('commerce_term_pricing_node_options', 'ctpno')
        ->fields('ctpno')
        ->condition('nid', $nid)
        ->execute()
        ->fetchAssoc();

      if (!empty($exists)) {
        $options = unserialize($exists['options_data']);
        $available_fields = $options['available_fields'];
        // First we turn off access to fields
        foreach ($form['line_item_fields'] as $field => &$settings) {
          if (is_array($settings) && isset($settings['#access'])) {
            $settings['#access'] = FALSE;
          }
        }
        // Now add access back for appropriate fields.
        foreach ($available_fields as $available_field) {
          //dsm('Field ' . $available_field . ' required status: ' . $options[$available_field . '_required'] . ' and the label is ' . $options[$available_field . '_label']);
          $field_settings = &$form['line_item_fields'][$available_field];
          $field_settings['#access'] = TRUE;
          $field_settings[LANGUAGE_NONE]['#required'] = $options[$available_field . '_required'];
          $field_settings[LANGUAGE_NONE]['#title'] = $options[$available_field . '_label'];
          $field_settings[LANGUAGE_NONE][0]['#title'] = $options[$available_field . '_label'];

          if (isset($field_settings[LANGUAGE_NONE]['#options'])) {
            $field_settings[LANGUAGE_NONE]['#options'] = array_intersect_key($field_settings[LANGUAGE_NONE]['#options'], array_filter($options[$available_field . '_options']));
          }
        }
        array_unshift($form['validate'], 'worx_commerce_term_pricing_image_validation');
      }
    }
  }
}

function worx_Commerce_term_pricing_image_validation($form, &$form_state) {
  $values = $form_state['value'];
  if (isset($values['field_number_of_images'])) {
    //@TODO: Count number of images uploaded and compare to number of images
    // field setting. If not the same, return error.
    form_set_error('', 'Test Error');
  }
}
