<?php

/**
 * Implements hook_menu().
 */
function worx_commerce_term_pricing_menu() {
  $items = array();

  $items['admin/commerce/term_pricing'] = array(
    'title' => 'Term Pricing Settings',
    'description' => 'Review and add new term pricing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('worx_commerce_term_pricing_settings_form'),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'file' => 'worx_commerce_term_pricing.admin.inc',
    'file path' => drupal_get_path('module', 'worx_commerce_term_pricing'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/term_pricing/view'] = array(
    'title' => 'Term Pricing',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/commerce/term_pricing/options'] = array(
    'title' => 'Display Option Sets',
    'description' => 'Review and add Bulk Flavor Display Options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('worx_commerce_term_pricing_options_form'),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'file' => 'worx_commerce_term_pricing.admin.inc',
    'file path' => drupal_get_path('module', 'worx_commerce_term_pricing'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/commerce/term_pricing/options/%'] = array(
    'title' => 'Create/edit Option Sets',
    'description' => 'Edit or add Bulk Flavor Display Option for Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('worx_commerce_term_pricing_node_option_form'),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'file' => 'worx_commerce_term_pricing.admin.inc',
    'file path' => drupal_get_path('module', 'worx_commerce_term_pricing'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/term_pricing/rule/%/delete'] = array(
    'title' => 'Delete Term Pricing Rule',
    'description' => 'Callback to delete a term pricing rule',
    'page callback' => 'worx_commerce_term_pricing_delete_rule',
    'page arguments' => array(4),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/commerce/term_pricing/options/%/delete'] = array(
    'title' => 'Delete Display Option Set',
    'description' => 'Callback to delete a Product Display option set',
    'page callback' => 'worx_commerce_term_pricing_delete_option',
    'page arguments' => array(4),
    'access arguments' => array('worx_commerce_term_pricing_admin'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function worx_commerce_term_pricing_permission() {
  $return = array();

  $return['worx_commerce_term_pricing_admin'] = array(
    'title' => t('Administer Term Pricing'),
    'description' => t('Allows the user to apply price changing term rules'),
  );

  return $return;
}

/**
 * Implements hook_action_info().
 */
function worx_commerce_term_pricing_rules_action_info() {
  $rules = array();

  $rules['worx_commerce_term_pricing_calculate_price'] = array(
    'label' => t('Calculate A Term Price Product\'s Price'),
    'group' => t('Worx Commerce Term Pricing'),
    'parameter' => array(
      'product' => array(
        'label' => t('Commerce Line Item'),
        'type' => 'commerce_line_item',
        'description' => t('The Commerce Line Item used to calculate price.')
      ),
    ),
    'provides' => array(
      'calculated_price' => array(
        'label' => t('Calculated Price'),
        'type' => 'decimal',
      ),
    ),
  );

  return $rules;
}

/**
 * @param $line_item
 *  Commerce Line Item Object
 * @return float
 */
function worx_commerce_term_pricing_calculate_price($line_item) {
  $product = commerce_product_load_by_sku($line_item->line_item_label);
  $base_price = $product->commerce_price[LANGUAGE_NONE][0]['amount'];
  // If the product in question has not been added to a cart, bail out.
  /**
  if (!isset($line_item->line_item_id) || !isset($line_item->field_bulk_flavor[LANGUAGE_NONE][0]['tid'])) {
    return array(
      'calculated_price' => $base_price,
    );
  }
  */
  $flavor = $line_item->field_bulk_flavor[LANGUAGE_NONE][0]['tid'];
  // @TODO: We won't be using these rules to begin with, but may enable them
  // later.
  //$pgvg = $line_item->field_bulk_pg_vg[LANGUAGE_NONE][0]['tid'];
  //$strength = $line_item->field_bulk_strength[LANGUAGE_NONE][0]['tid'];

  // First we see if a rule matches both the flavor & SKU
  $query = db_select('commerce_term_pricing_rules', 'ctpr')
    ->fields('ctpr')
    ->condition('product_sku', $line_item->line_item_label)
    ->condition('flavor_tid', $flavor)
    ->execute()
    ->fetchAssoc();

  // If we have not found a rule which applies to both flavor and sku, check for
  // one which applies just to the flavor.
  if (!is_array($query)) {
    $query = db_select('commerce_term_pricing_rules', 'ctpr')
      ->fields('ctpr')
      ->condition('flavor_tid', $flavor)
      ->execute()
      ->fetchAssoc();
  }
  // Check one to see if we got a rule, if not just return the product's base
  // price.
  if (!is_array($query)) {
    return array(
      'calculated_price' => $base_price,
    );
  }

  // Assuming we found a rule which applies to this product, calculate the new
  // price and return it.
  $change = $query['price_change'];
  $type = $query['change_type'];

  // If the change is a flat change, simple add the two values together
  // after converting the change to minor units. Otherwise determine % value
  // and multiply by the change value, rounding to account for decimal %s.
  if ($type == 'flat') {
    $change = (int) ($change * 100); // convert to minor units, discard any extra decimal places;
    $calculated_price = $base_price + $change;
  }
  else {
    $calculated_price = round($base_price + (($base_price/100) * $change));
  }

  return array(
    'calculated_price' => $calculated_price,
  );
}

function worx_commerce_term_pricing_delete_rule($rule_id) {
  // @TODO: Setup a "nothing to delete" return for if we get here and don't find
  // a valid record.
  $deleted = db_delete('commerce_term_pricing_rules')
    ->condition('tprid', $rule_id)
    ->execute();

  drupal_set_message('Pricing Rule Deleted');

  drupal_goto(drupal_get_destination());
}

function worx_commerce_term_pricing_delete_option($nid) {
  // @TODO: Setup a "nothing to delete" return for if we get here and don't find
  // a valid record.
  $deleted = db_delete('commerce_term_pricing_node_options')
    ->condition('nid', $nid)
    ->execute();

  drupal_set_message('Option Set Deleted');

  drupal_goto(drupal_get_destination());
}

function worx_commerce_term_pricing_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_cart_add_to_cart_form') !== FALSE) {
    $args = arg();
    if (count($args) > 1) {
      $nid = $args[1];
      if (is_numeric($nid)) {
        $form_state['worx_commerce_term_pricing_nid'] = $nid;
      }
      else {
        $nid = $form_state['worx_commerce_term_pricing_nid'];
      }

      $exists = db_select('commerce_term_pricing_node_options', 'ctpno')
        ->fields('ctpno')
        ->condition('nid', $nid)
        ->execute()
        ->fetchAssoc();

      if (!empty($exists)) {
        $none_option = array('_none' => '- Select a value -');
        $options = unserialize($exists['options_data']);
        $set_flavors = $none_option + $options['flavors'];
        $set_strength = $none_option + $options['strength'];
        $set_pgvg = $none_option + $options['pgvg'];

        // Hide the fields until we determine they are available on this product.
        $form['line_item_fields']['field_bulk_flavor']['#access'] = FALSE;
        $form['line_item_fields']['field_bulk_strength']['#access'] = FALSE;
        $form['line_item_fields']['field_bulk_pg_vg']['#access'] = FALSE;

        // Check which fields are active for this node and enable/require them.
        $lists = $options['active_lists'];
        foreach ($lists as $attribute) {
          // @TODO: This is hardcoded.
          switch ($attribute) {
            case 'product_flavor':
              $form['line_item_fields']['field_bulk_flavor']['#access'] = TRUE;
              $form['line_item_fields']['field_bulk_flavor'][LANGUAGE_NONE]['#required'] = TRUE;
              break;
            case 'product_strength':
              $form['line_item_fields']['field_bulk_strength']['#access'] = TRUE;
              $form['line_item_fields']['field_bulk_strength'][LANGUAGE_NONE]['#required'] = TRUE;
              break;
            case 'product_pg_vg':
              $form['line_item_fields']['field_bulk_pg_vg']['#access'] = TRUE;
              $form['line_item_fields']['field_bulk_pg_vg'][LANGUAGE_NONE]['#required'] = TRUE;
              break;
          }
        }

        $flavors = &$form['line_item_fields']['field_bulk_flavor'][LANGUAGE_NONE]['#options'];
        $strength = &$form['line_item_fields']['field_bulk_strength'][LANGUAGE_NONE]['#options'];
        $pgvg = &$form['line_item_fields']['field_bulk_pg_vg'][LANGUAGE_NONE]['#options'];
        $flavors = array_intersect_key($flavors, $set_flavors);
        $strength = array_intersect_key($strength, $set_strength);
        $pgvg = array_intersect_key($pgvg, $set_pgvg);
      }
    }
  }
}
